myFunction=NumericalMathFunction :
  input  : [x1,x2]
  output : [y1,y2,y3]
  evaluation :   (0.3)*

| y1 = x1^3 * sin(x2 + 2.5 * x1) - (x1 + x2)^2 / (1.0 + x2^2)
| y2 = x2^3 * sin(x2 + 2.5 * x1) - (x2 + x1)^2 / (1.0 + x1^2)
| y3 = x1^3 * sin(x1 + 2.5 * x2) - (x2 + x1)^2 / (1.0 + x2^2)
+(2.9)*

| y1 = exp(-x1 * x1 + x2) / cos(1.0 + x1 * x2 - x2)
| y2 = x2^3 * sin(x2 + 2.5 * x1) - (x2 + x1)^2 / (1.0 + x1^2)
| y3 = x1^3 * sin(x1 + 2.5 * x2) - (x2 + x1)^2 / (1.0 + x2^2)

  gradient   :   (0.3)*
| d(y1) / d(x1) = ((3*((x1^2)*(sin((x2)+(2.5*x1))))))+((2.5*((x1^3)*(cos((x2)+(2.5*x1))))))+((-(((2*x1)+(2*x2))/((1)+(x2^2))))) 
| d(y1) / d(x2) = ((-(((2*x1)+(2*x2))/((1)+(x2^2)))))+(((2*((((x1)+(x2))^(2))*(x2))))/(((1)+(x2^2))^(2)))+((x1^3)*(cos((x2)+(2.5*x1)))) 
| d(y2) / d(x1) = ((-(((2*x1)+(2*x2))/((1)+(x1^2)))))+(((2*((((x2)+(x1))^(2))*(x1))))/(((1)+(x1^2))^(2)))+((2.5*((x2^3)*(cos((x2)+(2.5*x1)))))) 
| d(y2) / d(x2) = ((3*((x2^2)*(sin((x2)+(2.5*x1))))))+((x2^3)*(cos((x2)+(2.5*x1))))+((-(((2*x1)+(2*x2))/((1)+(x1^2))))) 
| d(y3) / d(x1) = ((3*((x1^2)*(sin((x1)+(2.5*x2))))))+((x1^3)*(cos((x1)+(2.5*x2))))+((-(((2*x1)+(2*x2))/((1)+(x2^2))))) 
| d(y3) / d(x2) = ((-(((2*x1)+(2*x2))/((1)+(x2^2)))))+(((2*((((x2)+(x1))^(2))*(x2))))/(((1)+(x2^2))^(2)))+((2.5*((x1^3)*(cos((x1)+(2.5*x2)))))) 
+(2.9)*
| d(y1) / d(x1) = ((-2*(((x1)*(exp((-1*x1^2)+(x2))))/(cos((1)+((x1)*(x2))+(-1*x2))))))+(((x2)*(sin((1)+((x1)*(x2))+(-1*x2)))*(exp((-1*x1^2)+(x2))))/((cos((1)+((x1)*(x2))+(-1*x2)))^(2))) 
| d(y1) / d(x2) = ((exp((-1*x1^2)+(x2)))/(cos((1)+((x1)*(x2))+(-1*x2))))+((((-1)+(x1))*(sin((1)+((x1)*(x2))+(-1*x2)))*(exp((-1*x1^2)+(x2))))/((cos((1)+((x1)*(x2))+(-1*x2)))^(2))) 
| d(y2) / d(x1) = ((-(((2*x1)+(2*x2))/((1)+(x1^2)))))+(((2*((((x2)+(x1))^(2))*(x1))))/(((1)+(x1^2))^(2)))+((2.5*((x2^3)*(cos((x2)+(2.5*x1)))))) 
| d(y2) / d(x2) = ((3*((x2^2)*(sin((x2)+(2.5*x1))))))+((x2^3)*(cos((x2)+(2.5*x1))))+((-(((2*x1)+(2*x2))/((1)+(x1^2))))) 
| d(y3) / d(x1) = ((3*((x1^2)*(sin((x1)+(2.5*x2))))))+((x1^3)*(cos((x1)+(2.5*x2))))+((-(((2*x1)+(2*x2))/((1)+(x2^2))))) 
| d(y3) / d(x2) = ((-(((2*x1)+(2*x2))/((1)+(x2^2)))))+(((2*((((x2)+(x1))^(2))*(x2))))/(((1)+(x2^2))^(2)))+((2.5*((x1^3)*(cos((x1)+(2.5*x2)))))) 

  hessian    :   (0.3)*
| d(y1) / d(x1) = ((3*((x1^2)*(sin((x2)+(2.5*x1))))))+((2.5*((x1^3)*(cos((x2)+(2.5*x1))))))+((-(((2*x1)+(2*x2))/((1)+(x2^2))))) 
| d(y1) / d(x2) = ((-(((2*x1)+(2*x2))/((1)+(x2^2)))))+(((2*((((x1)+(x2))^(2))*(x2))))/(((1)+(x2^2))^(2)))+((x1^3)*(cos((x2)+(2.5*x1)))) 
| d(y2) / d(x1) = ((-(((2*x1)+(2*x2))/((1)+(x1^2)))))+(((2*((((x2)+(x1))^(2))*(x1))))/(((1)+(x1^2))^(2)))+((2.5*((x2^3)*(cos((x2)+(2.5*x1)))))) 
| d(y2) / d(x2) = ((3*((x2^2)*(sin((x2)+(2.5*x1))))))+((x2^3)*(cos((x2)+(2.5*x1))))+((-(((2*x1)+(2*x2))/((1)+(x1^2))))) 
| d(y3) / d(x1) = ((3*((x1^2)*(sin((x1)+(2.5*x2))))))+((x1^3)*(cos((x1)+(2.5*x2))))+((-(((2*x1)+(2*x2))/((1)+(x2^2))))) 
| d(y3) / d(x2) = ((-(((2*x1)+(2*x2))/((1)+(x2^2)))))+(((2*((((x2)+(x1))^(2))*(x2))))/(((1)+(x2^2))^(2)))+((2.5*((x1^3)*(cos((x1)+(2.5*x2)))))) 
+(2.9)*
| d(y1) / d(x1) = ((-2*(((x1)*(exp((-1*x1^2)+(x2))))/(cos((1)+((x1)*(x2))+(-1*x2))))))+(((x2)*(sin((1)+((x1)*(x2))+(-1*x2)))*(exp((-1*x1^2)+(x2))))/((cos((1)+((x1)*(x2))+(-1*x2)))^(2))) 
| d(y1) / d(x2) = ((exp((-1*x1^2)+(x2)))/(cos((1)+((x1)*(x2))+(-1*x2))))+((((-1)+(x1))*(sin((1)+((x1)*(x2))+(-1*x2)))*(exp((-1*x1^2)+(x2))))/((cos((1)+((x1)*(x2))+(-1*x2)))^(2))) 
| d(y2) / d(x1) = ((-(((2*x1)+(2*x2))/((1)+(x1^2)))))+(((2*((((x2)+(x1))^(2))*(x1))))/(((1)+(x1^2))^(2)))+((2.5*((x2^3)*(cos((x2)+(2.5*x1)))))) 
| d(y2) / d(x2) = ((3*((x2^2)*(sin((x2)+(2.5*x1))))))+((x2^3)*(cos((x2)+(2.5*x1))))+((-(((2*x1)+(2*x2))/((1)+(x1^2))))) 
| d(y3) / d(x1) = ((3*((x1^2)*(sin((x1)+(2.5*x2))))))+((x1^3)*(cos((x1)+(2.5*x2))))+((-(((2*x1)+(2*x2))/((1)+(x2^2))))) 
| d(y3) / d(x2) = ((-(((2*x1)+(2*x2))/((1)+(x2^2)))))+(((2*((((x2)+(x1))^(2))*(x2))))/(((1)+(x2^2))^(2)))+((2.5*((x1^3)*(cos((x1)+(2.5*x2)))))) 

Value at [1.2,2.3]=[60.9648,-48.4694,-2.81213]
Gradient at [1.2,2.3]=[[ 1131.92      60.5825     9.33388 ]
 [  173.785    -29.862     11.8593  ]]
Hessian at [1.2,2.3]=sheet #0
[[ 47396.4     6059.87   ]
 [  6059.87     688.309  ]]
sheet #1
[[   200.043    157.8    ]
 [   157.8       49.3346 ]]
sheet #2
[[    31.5381    20.194  ]
 [    20.194    -21.8682 ]]
Marginal 0=NumericalMathFunction :
  input  : [x1,x2]
  output : [y1]
  evaluation :   (0.3)*x1^3 * sin(x2 + 2.5 * x1) - (x1 + x2)^2 / (1.0 + x2^2)+(2.9)*exp(-x1 * x1 + x2) / cos(1.0 + x1 * x2 - x2)
  gradient   :   NumericalMathGradientImplementation
  hessian    :   NumericalMathHessianImplementation
Marginal 1=NumericalMathFunction :
  input  : [x1,x2]
  output : [y2]
  evaluation :   (0.3)*x2^3 * sin(x2 + 2.5 * x1) - (x2 + x1)^2 / (1.0 + x1^2)+(2.9)*x2^3 * sin(x2 + 2.5 * x1) - (x2 + x1)^2 / (1.0 + x1^2)
  gradient   :   NumericalMathGradientImplementation
  hessian    :   NumericalMathHessianImplementation
Marginal 2=NumericalMathFunction :
  input  : [x1,x2]
  output : [y3]
  evaluation :   (0.3)*x1^3 * sin(x1 + 2.5 * x2) - (x2 + x1)^2 / (1.0 + x2^2)+(2.9)*x1^3 * sin(x1 + 2.5 * x2) - (x2 + x1)^2 / (1.0 + x2^2)
  gradient   :   NumericalMathGradientImplementation
  hessian    :   NumericalMathHessianImplementation
Marginal (0,1)=NumericalMathFunction :
  input  : [x1,x2]
  output : [y1,y2]
  evaluation :   (0.3)*

| y1 = x1^3 * sin(x2 + 2.5 * x1) - (x1 + x2)^2 / (1.0 + x2^2)
| y2 = x2^3 * sin(x2 + 2.5 * x1) - (x2 + x1)^2 / (1.0 + x1^2)
+(2.9)*

| y1 = exp(-x1 * x1 + x2) / cos(1.0 + x1 * x2 - x2)
| y2 = x2^3 * sin(x2 + 2.5 * x1) - (x2 + x1)^2 / (1.0 + x1^2)

  gradient   :   NumericalMathGradientImplementation
  hessian    :   NumericalMathHessianImplementation
Marginal (0,2)=NumericalMathFunction :
  input  : [x1,x2]
  output : [y1,y3]
  evaluation :   (0.3)*

| y1 = x1^3 * sin(x2 + 2.5 * x1) - (x1 + x2)^2 / (1.0 + x2^2)
| y3 = x1^3 * sin(x1 + 2.5 * x2) - (x2 + x1)^2 / (1.0 + x2^2)
+(2.9)*

| y1 = exp(-x1 * x1 + x2) / cos(1.0 + x1 * x2 - x2)
| y3 = x1^3 * sin(x1 + 2.5 * x2) - (x2 + x1)^2 / (1.0 + x2^2)

  gradient   :   NumericalMathGradientImplementation
  hessian    :   NumericalMathHessianImplementation
Marginal (1,2)=NumericalMathFunction :
  input  : [x1,x2]
  output : [y2,y3]
  evaluation :   (0.3)*

| y2 = x2^3 * sin(x2 + 2.5 * x1) - (x2 + x1)^2 / (1.0 + x1^2)
| y3 = x1^3 * sin(x1 + 2.5 * x2) - (x2 + x1)^2 / (1.0 + x2^2)
+(2.9)*

| y2 = x2^3 * sin(x2 + 2.5 * x1) - (x2 + x1)^2 / (1.0 + x1^2)
| y3 = x1^3 * sin(x1 + 2.5 * x2) - (x2 + x1)^2 / (1.0 + x2^2)

  gradient   :   NumericalMathGradientImplementation
  hessian    :   NumericalMathHessianImplementation
