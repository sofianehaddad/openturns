%feature("docstring") OT::VisualTest::DrawHenryLine
"Draws an Henry plot as an OpenTURNS :class:`~openturns.Graph`.

Parameters
----------
sample : :class:`~openturns.NumericalSample` or 2d array, list or tuple
    Tested (univariate) sample.
normal_distribution : :class:`~openturns.Normal`, optional
    Tested (univariate) normal distribution.

    If not given, this will build a :class:`~openturns.Normal` distribution
    from the given sample using the :class:`~openturns.NormalFactory`.

Notes
-----
The Henry plot is a visual fitting test for the normal distribution. It
opposes the sample quantiles to those of the standard normal distribution
(the one with zero mean and unit variance) by plotting the following points
could:

.. math::

    \left(x^{(i)},
          \Phi^{-1}\left[\widehat{F}\left(x^{(i)}\right)\right]
    \right), \quad i = 1, \ldots, m

where :math:`\widehat{F}` denotes the empirical CDF of the sample and
:math:`\Phi^{-1}` denotes the quantile function of the standard normal
distribution.

If the given sample fits to the tested normal distribution (with mean
:math:`\mu` and standard deviation :math:`\sigma`), then the points should be
close to be aligned (up to the uncertainty associated with the estimation
of the empirical probabilities) on the **Henry line** whose equation reads:

.. math::

    y = \frac{x - \mu}{\sigma}, \quad x \in \Rset

The Henry plot is a special case of the more general QQ-plot.

See Also
--------
VisualTest_DrawQQplot, FittingTest_Kolmogorov

Examples
--------
>>> import openturns as ot
>>> from openturns.viewer import View

Generate a random sample from a Normal distribution:

>>> ot.RandomGenerator.SetSeed(0)
>>> distribution = ot.Normal(2., .5)
>>> sample = distribution.getSample(30)

Draw an Henry plot against a given (wrong) Normal distribution:

>>> henry_graph = ot.VisualTest_DrawHenryLine(sample, distribution)
>>> henry_graph.setTitle('Henry plot against given %s' % ot.Normal(3., 1.))
>>> View(henry_graph).show()

Draw an Henry plot against an inferred Normal distribution:

>>> henry_graph = ot.VisualTest_DrawHenryLine(sample)
>>> henry_graph.setTitle('Henry plot against inferred Normal distribution')
>>> View(henry_graph).show()"

// ---------------------------------------------------------------------

%feature("docstring") OT::VisualTest::DrawQQplot
"Draws a QQ-plot as an OpenTURNS :class:`~openturns.Graph`.

Parameters
----------
sample : :class:`~openturns.NumericalSample`
    Tested sample.
tested_quantity : :class:`~openturns.Distribution` or :class:`~openturns.NumericalSample`
    Tested model or sample.
n_points : int, if `tested_quantity` is a :class:`~openturns.NumericalSample`
    The number of points that is used for interpolating the empirical CDF of
    the two samples (with possibly different sizes).

    It will default to `DistributionImplementation-DefaultPointNumber` from
    the :class:`~openturns.ResourceMap`.

Notes
-----
The QQ-plot is a visual fitting test for univariate distributions. It
opposes the sample quantiles to those of the tested quantity (either a
distribution or another sample) by plotting the following points could:

.. math::

    \left(x^{(i)},
          \bullet\left[\widehat{F}\left(x^{(i)}\right)\right]
    \right), \quad i = 1, \ldots, m

where :math:`\widehat{F}` denotes the empirical CDF of the (first) tested
sample and :math:`\bullet` denotes either the quantile function of the tested
distribution or the empirical quantile function of the second tested sample.

If the given sample fits to the tested distribution or sample, then the points
should be close to be aligned (up to the uncertainty associated with the
estimation of the empirical probabilities) with the **first bissector**  whose
equation reads:

.. math::

    y = x, \quad x \in \Rset

Examples
--------
>>> import openturns as ot
>>> from openturns.viewer import View

Generate a random sample from a Normal distribution:

>>> ot.RandomGenerator.SetSeed(0)
>>> distribution = ot.Weibull(2., .5)
>>> sample = distribution.getSample(30)
>>> sample.setDescription(['Sample'])

Draw a QQ-plot against a given (inferred) distribution:

>>> tested_distribution = ot.WeibullFactory().build(sample)
>>> QQ_plot = ot.VisualTest_DrawQQplot(sample, tested_distribution)
>>> View(QQ_plot).show()

Draw a two-sample QQ-plot:

>>> another_sample = distribution.getSample(50)
>>> another_sample.setDescription(['Another sample'])
>>> QQ_plot = ot.VisualTest_DrawQQplot(sample, another_sample)
>>> View(QQ_plot).show()"